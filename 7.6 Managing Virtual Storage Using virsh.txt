We've looked at two ways we can use `libvirt` to administer virtual machines via QEMU/KVM, Virtual Machine Manager (`virt-manager`), and Cockpit.  While these were easy to use, sometimes we need the granularity and power that command-line tools provide.  Fortunately for us, `libvirt` has a set of command-line tools to round out our toolkit.  In this lesson, we will take a look at managing virtual storage using `virsh`.

#### Reference Links

[libvirt: Storage Management](https://libvirt.org/storage.html)
[libvirt: virsh](https://libvirt.org/manpages/virsh.html#synopsis)

### Managing Virtual Storage Using `virsh`

The `virsh` command enables us to manipulate storage pools, volumes, and snapshots.

Our DBA team has requested five additional storage volumes for the new CentOS 7 database VM.  We want to create these in a new storage pool so we can manage and track the DBA team's storage resources in one place.  We will also take a snapshot of our virtual machine after we add the storage, in case we need to roll back.

#### Managing Storage Pools Using `virsh`

We are going to create a new storage pool for the DBA team.  

1. Let's take a look at our current inventory of storage pools:
    ```
    sudo virsh pool-list --all
    ```
2. Let's create a new storage pool for the DBA team:
    ```
    sudo virsh pool-define-as DBA_Team dir - - - - "/home/DB_Virtual_Machines"
    ```
3. Let's take a look at our current inventory of storage pools:
    ```
    sudo virsh pool-list --all
    ```
4. Use `virsh pool-build` to build the storage pool:
    ```
    sudo virsh pool-build DBA_Team
    ```
5. Confirm we have what we want in `/home`:
    ```
    sudo ls -la /home
    ```
6. Let's set our new storage pool to autostart:
    ```
    sudo virsh pool-autostart DBA_Team
    ```
7. We will need to start the storage pool:
    ```
    sudo virsh pool-start DBA_Team
    ```
8. Now, let's take a look at our current inventory of storage pools:

9. List storage pools:
    ```
    sudo virsh pool-list --all
    ```
10. Get pool information for 'DBA_Team':
    ```
    sudo virsh pool-info DBA_Team
    ```
Now the DBA team has a place to keep their VMs and storage volumes.

#### Managing Volumes Using 'virsh'

Next, we will need to create five new storage volumes, attach them to the virtual machine, and confirm they are accessible to the operating system.

1. Use `virsh` to create five 10G volumes, named as follows:
    ```
    sudo virsh vol-create-as DBA_Team centos-7-db1.qcow2 10G --format qcow2
    ```
    ```
    sudo virsh vol-create-as DBA_Team centos-7-db2.qcow2 10G --format qcow2
    ```
    ```
    sudo virsh vol-create-as DBA_Team centos-7-db3.qcow2 10G --format qcow2
    ```
    ```
    sudo virsh vol-create-as DBA_Team centos-7-db4.qcow2 10G --format qcow2
    ```
    ```
    sudo virsh vol-create-as DBA_Team centos-7-db5.qcow2 10G --format qcow2
    ```
2. Let's take a look at our new volumes:
    ```
    sudo virsh vol-list DBA_Team
    ```
3. Let's take a look at the files backing them:
    ```
    ls -la /home/DB_Virtual_Machines
    ```
4. Let's take a look at the list of virtual disk devices on our virtual machine:
    ```
    sudo virsh domblkinfo centos-7-cli-vm --all
    ```
5. Get the next virtual device name.  It should be `/dev/vdb`.

6. Before we make any edits, we will need to shut down the guest:
    ```
    sudo virsh shutdown centos-7-cli-vm
    ```
7. Now, let's attach these volumes to the virtual machine:
    ```
    sudo virsh attach-disk centos-7-cli-vm --source /home/DB_Virtual_Machines/centos-7-db1.qcow2 --target vdb --cache none --driver qemu --subdriver qcow2 --config
    ```
    ```
    sudo virsh attach-disk centos-7-cli-vm --source /home/DB_Virtual_Machines/centos-7-db2.qcow2 --target vdc --cache none --driver qemu --subdriver qcow2 --config
    ```
    ```
    sudo virsh attach-disk centos-7-cli-vm --source /home/DB_Virtual_Machines/centos-7-db3.qcow2 --target vdd --cache none --driver qemu --subdriver qcow2 --config
    ```
    ```
    sudo virsh attach-disk centos-7-cli-vm --source /home/DB_Virtual_Machines/centos-7-db4.qcow2 --target vde --cache none --driver qemu --subdriver qcow2 --config
    ```
    ```
    sudo virsh attach-disk centos-7-cli-vm --source /home/DB_Virtual_Machines/centos-7-db5.qcow2 --target vdf --cache none --driver qemu --subdriver qcow2 --config
    ```
8. Let's take a look at the list of virtual disk devices on our virtual machine:
    ```
    sudo virsh domblkinfo centos-7-cli-vm --all
    ```
9. Start the domain:
    ```
    sudo virsh start centos-7-cli-vm
    ```
10. Log in to the virtual machine using `virsh console` as 'cloud_user':
    ```
    sudo virsh console centos-7-cli-vm
    ```
11. Confirm that the devices are available to the operating system:
    ```
    ls -la /dev/vd*
    ```
    ```
    sudo fdisk -l | more
    ```
12. Use **CTRL** + **]** to exit the `virsh` console.

    The DBA team hasn't decided exactly how they want the storage configured from here, so we're going to leave it as-is for now.

We now have the additional database storage configured!

#### Managing Snapshots Using `virsh`

The DBA team has requested that we install `mariadb` before we continue.  We've done a lot of work at this point, so we'd like to take a snapshot before we install `mariadb`, *just in case*.

1. Let's take a look at the list of snapshots for our virtual machine:
    ```
    sudo virsh snapshot-list centos-7-cli-vm
    ```
2. Now, take a snapshot of the virtual machine:
    ```
    sudo virsh snapshot-create-as centos-7-cli-vm pre-mariadb
    ```
3. Let's take a look at the list of snapshots for our virtual machine:
    ```
    sudo virsh snapshot-list centos-7-cli-vm
    ```
4. Now, let's install `mariadb` on our virtual machine.  Connect to the console again:
    ```
    sudo virsh console centos-7-cli-vm
    ```
5. Install `mariadb`:
    ```
    sudo yum -y install mariadb
    ```
6. Let's confirm that `mariadb` is installed:
    ```
    sudo yum list installed | grep -i mariadb
    ```
Fantastic!  We're done here.  Use **CTRL** + **]** to exit the `virsh` console.

Well, until the DBA team sends us an e-mail letting us know that they wanted `postgresql`, not `mariadb`.

Have no fear; we have our snapshot to bail us out!

1. Let's take a look at information about our snapshots:
    ```
    sudo virsh snapshot-info centos-7-cli-vm --current
    ```
2. Let's roll back our snapshot:
    ```
    sudo virsh snapshot-revert centos-7-cli-vm --current
    ```
3. Connect to the console again:
    ```
    sudo virsh console centos-7-cli-vm
    ```
4. Let's confirm that `mariadb` is NOT installed:
    ```
    sudo yum list installed | grep -i mariadb
    ```
5. Install `postgresql`:
    ```
    sudo yum -y install postgresql
    ```
6. Let's confirm that `postgresql` is installed:
    ```
    sudo yum list installed | grep -i postgresql
    ```
7. Fantastic!  We're done here.  Log out.  Use **CTRL** + **]** to exit the `virsh` console.

That snapshot really saved us!  We're even closer now to having our database server template!

### In this lesson, we covered:

- Managing storage pools using `virsh`
- Managing volumes using `virsh`
- Managing snapshots using `virsh`
